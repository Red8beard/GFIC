from tkinter import *
import sqlite3


class Example(Frame):

    def __init__(self):
        super().__init__()

        self.initUI()


    def initUI(self):
        
        self.master.title("Review")
        self.pack(fill=BOTH, expand=True)
        

        # Create a database or connect to one
        conn = sqlite3.connect('address_book.db')

        # Create cursor
        c = conn.cursor()

        # Create table
        c.execute("""CREATE TABLE IF NOT EXISTS addresses (
    	        first_name text,
        	    last_name text,
            	address text,
	            city text,
    	        state text,
        	    zipcode integer
            	)""")

        # Create Update function to update a record
        def update():
            # Create a database or connect to one
            conn = sqlite3.connect('address_book.db')
            # Create cursor
            c = conn.cursor()

            record_id = delete_box.get()

            c.execute("""UPDATE addresses SET
                    first_name = :first,
                    last_name = :last,
                    address = :address,
                    city = :city,
                    state = :state,
                    zipcode = :zipcode

                    WHERE oid = :oid""",
                    {
                    'first': f_name_editor.get(),
                    'last': l_name_editor.get(),
                    'address': address_editor.get(),
                    'city': city_editor.get(),
                    'state': state_editor.get(),
                    'zipcode': zipcode_editor.get(),
                    'oid': record_id
                    })


            #Commit Changes
            conn.commit()

            # Close Connection
            conn.close()

            editor.destroy()
        #    frame1.deiconify()
        #    frame1.withdraw()

        # Create Edit function to update a record
        def edit():
            global editor

            editor = Tk()
            editor.title('Update A Record')
            #editor.geometry("400x300")
                
            # Create a database or connect to one
            conn = sqlite3.connect('address_book.db')
            # Create cursor
            c = conn.cursor()

            record_id = delete_box.get()
                
            # Query the database
            c.execute("SELECT * FROM addresses WHERE oid = " + record_id)
            records = c.fetchall()

            #Create Global Variables for text box names
            global f_name_editor
            global l_name_editor
            global address_editor
            global city_editor
            global state_editor
            global zipcode_editor

            editor1 = Frame(self)
            editor1.pack(fill=X)            
            f_name_label = Label(editor1, text="First Name")
            f_name_label.pack(side=LEFT, padx=5, pady=5)
			f_name_editor =	Entry(editor1, width=30)
			f_name_editor.pack(fill=X, padx=5, expand=True)

            editor2 = Frame(self)
            editor2.pack(fill=X)
            l_name_label = Label(editor2, text="Last Name")
            l_name_label.pack(side=LEFT, padx=5, pady=5)
            l_name_editor = Entry(editor2, width=30)
            l_name_editor.pack(fill=X, padx=5, expand=True)
 
            editor3 = Frame(self)
            editor3.pack(fill=X) 
            address_label = Label(editor3, text="Address")
            address_label.pack(side=LEFT, padx=5, pady=5) 
            address_editor = Entry(editor3, width=30)
            address_editor.pack(fill=X, padx=5, expand=True)
  
            editor4 = Frame(self)
            editor4.pack(fill=X)
            city_label = Label(editor4, text="City")
            city_label.pack(side=LEFT, padx=5, pady=5)
            city_editor = Entry(editor4, width=30)
            city_editor.pack(fill=X, padx=5, expand=True)

            editor5 = Frame(self)
            editor5.pack(fill=X)
            state_label = Label(editor5, text="State")
            state_label.pack(side=LEFT, padx=5, pady=5)			
            state_editor = Entry(editor5, width=30)
            state_editor.pack(fill=X, padx=5, expand=True)

            editor6 = Frame(self)
            editor6.pack(fill=X)
            zipcode_label = Label(editor6, text="Zipcode")
            zipcode_label.pack(side=LEFT, padx=5, pady=5)			
            zipcode_editor = Entry(editor6, width=30)
            zipcode_editor.pack(fill=X, padx=5, expand=True)

            for record in records:
                f_name_editor.insert(0, record[0])
                l_name_editor.insert(0, record[1])
                address_editor.insert(0, record[2])
                city_editor.insert(0, record[3])
                state_editor.insert(0, record[4])
                zipcode_editor.insert(0, record[5])

            editor7 = Frame(self)
            editor7.pack(fill=X)
            edit_btn = Button(editor7, text="Save Record", command=update)
            edit_btn.pack(fill=X, pady=10)


        def delete():
            # Create a database or connect to one
            conn = sqlite3.connect('address_book.db')
            # Create cursor
            c = conn.cursor()

            # Delete a record
            c.execute("DELETE from addresses WHERE oid = " + delete_box.get())

            delete_box.delete(0, END)

            #Commit Changes
            conn.commit()

            # Close Connection
            conn.close()


        def submit():

            conn = sqlite3.connect('address_book.db')

            c = conn.cursor()

            c.execute("INSERT INTO addresses VALUES (:f_name, :l_name, :address, :city, :state, :zipcode)",
                    {
                    'f_name': f_name.get(),
                    'l_name': l_name.get(),
                    'address': address.get(),
                    'city': city.get(),
                    'state': state.get(),
                    'zipcode': zipcode.get()
                    })

            conn.commit()

            conn.close()

            f_name.delete(0, END)
            l_name.delete(0, END)
            address.delete(0, END)
            city.delete(0, END)
            state.delete(0, END)
            zipcode.delete(0, END)


        def query():

			frame12 = Frame(self)
        	frame12.pack(fill=X)

            conn = sqlite3.connect('address_book.db')
            c = conn.cursor()

            c.execute("SELECT *, oid FROM addresses")
            records = c.fetchall()

            print_records = ''
            for record in records:
                print_records += str(record[0]) + " " + str(record[1]) + " " + str(record[2]) + " " + str(record[3]) + " " + "\t" +str(record[6]) + "\n"

                query_label = Label(frame12, text=print_records)
                query_label.pack(fill=X, pady=10)

            conn.commit()

            conn.close()


        frame1 = Frame(self)
        frame1.pack(fill=X)
		f_name_label = Label(frame1, text="First Name")
		f_name_label.pack(side=LEFT, padx=5, pady=5)
		f_name = Entry(frame1, width=30)
        f_name.pack(fill=X, padx=5, expand=True)       
        
		frame2 = Frame(self)
        frame2.pack(fill=X)				
		l_name_label = Label(frame2, text="Last Name")
        l_name_label.pack(side=LEFT, padx=5, pady=5)        
		l_name = Entry(frame2, width=30)
        l_name.pack(fill=X, padx=5, expand=True)        
		
		frame3 = Frame(self)
        frame3.pack(fill=X)         
		address_label = Label(frame3, text="Address")
        address_label.pack(side=LEFT, padx=5, pady=5)        
		address = Entry(frame3, width=30)
        address.pack(fill=X, padx=5, expand=True) 
		
		frame4 = Frame(self)
        frame4.pack(fill=X)
        city_label = Label(frame4, text="City")
        city_label.pack(side=LEFT, padx=5, pady=5)
        city = Entry(frame4, width=30)
        city.pack(fill=X, padx=5, expand=True)       
		
		frame5 = Frame(self)
        frame5.pack(fill=X)
        state_label = Label(frame5, text="State")
        state_label.pack(side=LEFT, padx=5, pady=5)
        state = Entry(frame5, width=30)
        state.pack(fill=X, padx=5, expand=True)        
		
		frame6 = Frame(self)
        frame6.pack(fill=X)
        zipcode_label = Label(frame6, text="Zipcode")
        zipcode_label.pack(side=LEFT, padx=5, pady=5)
        zipcode = Entry(frame6, width=30)
        zipcode.pack(fill=X, padx=5, expand=True)        
		
		frame7 = Frame(self)
        frame7.pack(fill=X)
        delete_box_label = Label(frame7, text="Select ID")
        delete_box_label.pack(side=LEFT, padx=5, pady=5)
        delete_box = Entry(frame7, width=30)
        delete_box.pack(fill=X, padx=5, expand=True)


		frame8 = Frame(self)
        frame8.pack(fill=X)
        submit_btn = Button(frame8, text="Add Record To Database", command=submit)
        submit_btn.pack(fill=X, pady=10)

		frame9 = Frame(self)
        frame9.pack(fill=X)
        query_btn = Button(frame9, text="Show Records", command=query)
        query_btn.pack(fill=X, pady=10)

		frame10 = Frame(self)
        frame10.pack(fill=X)
        delete_btn = Button(frame10, text="Delete Record", command=delete)
        delete_btn.pack(fill=X, pady=10)

		frame11 = Frame(self)
        frame11.pack(fill=X)
        edit_btn = Button(frame11, text="Edit Record", command=edit)
        edit_btn.pack(fill=X, pady=10)


        #Commit Changes
        conn.commit()

        # Close Connection
        conn.close()

#root.mainloop()

def main():

    root = Tk()
    root.geometry("300x300+300+300")
    app = Example()
    root.mainloop()


if __name__ == '__main__':
    main()